{"version":3,"sources":["Code.test.js"],"names":["placeholder","html","css","js","jest","mock","test","code","render","className","container","firstChild","expect","toBeInTheDocument","toHaveClass","codepen","getByTitle","toHaveAttribute","not","toHaveTextContent","title","getByText","custom"],"mappings":"sJAIMA,EAAc,CAClBC,KAAK,gBACLC,IAAI,YACJC,GAAG,2CAELC,KAAKC,KAAK,sBAAsB,iBAAO,CAAEL,kBAEzCM,KAAK,oBAAoB,WACvB,IAEMC,EAFgBC,YAAO,cAAC,UAAD,CAAMC,UAAU,cAArCC,UAEeC,WACvBC,OAAOL,GAAMM,oBACbD,OAAOL,GAAMO,YAAY,OAAQ,MAAO,WAG1CR,KAAK,mBAAmB,WACtB,IAEMS,GAAUC,EAFOR,YAAO,cAAC,UAAD,KAAtBQ,YAEmB,WAC3BJ,OAAOG,GAASF,oBAChBD,OAAOG,GAASE,gBAAgB,eAAhC,gBACAL,OAAOG,GAASG,IAAIC,uBAGtBb,KAAK,8BAA8B,WACjC,IAAMc,EAAQ,gBAIRL,GAAUC,EAFOR,YAAO,cAAC,UAAD,CAAMY,MAAOA,KAAnCJ,YAEmB,WAC3BJ,OAAOG,GAASF,oBAChBD,OAAOG,GAASE,gBAAgB,eAAhC,oBAA6DG,EAA7D,OACAR,OAAOG,GAASG,IAAIC,uBAGtBb,KAAK,yEAAyE,WAC5E,IAAQe,EAAcb,YAAO,cAAC,UAAD,KAArBa,UAEFpB,EAAOoB,EAAUrB,EAAYC,MACnCW,OAAOX,GAAMY,oBACbD,OAAOX,GAAMgB,gBAAgB,YAAa,QAE1C,IAAMf,EAAMmB,EAAUrB,EAAYE,KAClCU,OAAOV,GAAKW,oBACZD,OAAOV,GAAKe,gBAAgB,YAAa,OAEzC,IAAMd,EAAKkB,EAAUrB,EAAYG,IACjCS,OAAOT,GAAIU,oBACXD,OAAOT,GAAIc,gBAAgB,YAAa,SAG1CX,KAAK,qEAAqE,WACxE,IAAMgB,EAAS,CACbrB,KAAK,qBACLC,IAAI,sBACJC,GAAG,kBAGGkB,EAAcb,YAAO,cAAC,UAAD,eAAUc,KAA/BD,UAEFpB,EAAOoB,EAAUC,EAAOrB,MAC9BW,OAAOX,GAAMY,oBACbD,OAAOX,GAAMgB,gBAAgB,YAAa,QAE1C,IAAMf,EAAMmB,EAAUC,EAAOpB,KAC7BU,OAAOV,GAAKW,oBACZD,OAAOV,GAAKe,gBAAgB,YAAa,OAEzC,IAAMd,EAAKkB,EAAUC,EAAOnB,IAC5BS,OAAOT,GAAIU,oBACXD,OAAOT,GAAIc,gBAAgB,YAAa","file":"static/js/5.ad06df8d.chunk.js","sourcesContent":["import React from \"react\"\nimport { render } from \"@testing-library/react\"\nimport Code from \"./Code\"\n\nconst placeholder = {\n  html: `<body></body>`,\n  css: `body { };`,\n  js: `//one-line comment for testing purposes`,\n}\njest.mock(\"./code/placeholder\", () => ({ placeholder }))\n\ntest(\"renders Code box\", () => {\n  const { container } = render(<Code className=\"Box Test\" />)\n\n  const code = container.firstChild\n  expect(code).toBeInTheDocument()\n  expect(code).toHaveClass(\"Code\", \"Box\", \"Test\")\n})\n\ntest(\"renders CodePen\", () => {\n  const { getByTitle } = render(<Code />)\n\n  const codepen = getByTitle(\"codepen\")\n  expect(codepen).toBeInTheDocument()\n  expect(codepen).toHaveAttribute(\"data-prefill\", `{\"title\":\"\"}`)\n  expect(codepen).not.toHaveTextContent()\n})\n\ntest(\"renders CodePen with title\", () => {\n  const title = \"Hello, World!\"\n\n  const { getByTitle } = render(<Code title={title} />)\n\n  const codepen = getByTitle(\"codepen\")\n  expect(codepen).toBeInTheDocument()\n  expect(codepen).toHaveAttribute(\"data-prefill\", `{\"title\":\"${title}\"}`)\n  expect(codepen).not.toHaveTextContent()\n})\n\ntest(\"renders CodePen with default placeholder prefill for html, css and js\", () => {\n  const { getByText } = render(<Code />)\n\n  const html = getByText(placeholder.html)\n  expect(html).toBeInTheDocument()\n  expect(html).toHaveAttribute(\"data-lang\", \"html\")\n\n  const css = getByText(placeholder.css)\n  expect(css).toBeInTheDocument()\n  expect(css).toHaveAttribute(\"data-lang\", \"css\")\n\n  const js = getByText(placeholder.js)\n  expect(js).toBeInTheDocument()\n  expect(js).toHaveAttribute(\"data-lang\", \"js\")\n})\n\ntest(\"renders CodePen with custom provided prefill for html, css and js\", () => {\n  const custom = {\n    html: `<div>welcome</div>`,\n    css: `div {color: purple}`,\n    js: `alert('hello')`,\n  }\n\n  const { getByText } = render(<Code {...custom} />)\n\n  const html = getByText(custom.html)\n  expect(html).toBeInTheDocument()\n  expect(html).toHaveAttribute(\"data-lang\", \"html\")\n\n  const css = getByText(custom.css)\n  expect(css).toBeInTheDocument()\n  expect(css).toHaveAttribute(\"data-lang\", \"css\")\n\n  const js = getByText(custom.js)\n  expect(js).toBeInTheDocument()\n  expect(js).toHaveAttribute(\"data-lang\", \"js\")\n})\n"],"sourceRoot":""}