{"version":3,"sources":["Code.test.js"],"names":["test","code","render","className","container","firstChild","expect","toBeInTheDocument","toHaveClass","codepen","getByTitle","toHaveAttribute","not","toHaveTextContent","title","getByText","html","css","js","content","startsWith","prefill"],"mappings":"qJAIAA,KAAK,oBAAoB,WACvB,IAEMC,EAFgBC,YAAO,cAAC,UAAD,CAAMC,UAAU,cAArCC,UAEeC,WACvBC,OAAOL,GAAMM,oBACbD,OAAOL,GAAMO,YAAY,OAAQ,MAAO,WAG1CR,KAAK,mBAAmB,WACtB,IAEMS,GAAUC,EAFOR,YAAO,cAAC,UAAD,KAAtBQ,YAEmB,WAC3BJ,OAAOG,GAASF,oBAChBD,OAAOG,GAASE,gBAAgB,eAAhC,gBACAL,OAAOG,GAASG,IAAIC,uBAGtBb,KAAK,8BAA8B,WACjC,IAAMc,EAAQ,gBAIRL,GAAUC,EAFOR,YAAO,cAAC,UAAD,CAAMY,MAAOA,KAAnCJ,YAEmB,WAC3BJ,OAAOG,GAASF,oBAChBD,OAAOG,GAASE,gBAAgB,eAAhC,oBAA6DG,EAA7D,OACAR,OAAOG,GAASG,IAAIC,uBAGtBb,KAAK,6DAA6D,WAChE,IAMQe,EAAcb,YAAO,cAAC,UAAD,eANb,CACdc,MAAM,EACNC,KAAK,EACLC,IAAI,MAGEH,UAEFC,EAAOD,GAAU,SAACI,GAAD,OAAaA,EAAQC,WAAW,aACvDd,OAAOU,GAAMT,oBACbD,OAAOU,GAAML,gBAAgB,YAAa,QAE1C,IAAMM,EAAMF,GAAU,SAACI,GAAD,OAAaA,EAAQC,WAAW,WACtDd,OAAOW,GAAKV,oBACZD,OAAOW,GAAKN,gBAAgB,YAAa,OAEzC,IAAMO,EAAKH,GAAU,SAACI,GAAD,OAAaA,EAAQC,WAAW,SACrDd,OAAOY,GAAIX,oBACXD,OAAOY,GAAIP,gBAAgB,YAAa,SAG1CX,KAAK,8DAA8D,WACjE,IAAMqB,EAAU,CACdL,KAAK,qBACLC,IAAI,sBACJC,GAAG,kBAGGH,EAAcb,YAAO,cAAC,UAAD,eAAUmB,KAA/BN,UAEFC,EAAOD,EAAUM,EAAQL,MAC/BV,OAAOU,GAAMT,oBACbD,OAAOU,GAAML,gBAAgB,YAAa,QAE1C,IAAMM,EAAMF,EAAUM,EAAQJ,KAC9BX,OAAOW,GAAKV,oBACZD,OAAOW,GAAKN,gBAAgB,YAAa,OAEzC,IAAMO,EAAKH,EAAUM,EAAQH,IAC7BZ,OAAOY,GAAIX,oBACXD,OAAOY,GAAIP,gBAAgB,YAAa","file":"static/js/5.3ff9004b.chunk.js","sourcesContent":["import React from \"react\"\nimport { render } from \"@testing-library/react\"\nimport Code from \"./Code\"\n\ntest(\"renders Code box\", () => {\n  const { container } = render(<Code className=\"Box Test\" />)\n\n  const code = container.firstChild\n  expect(code).toBeInTheDocument()\n  expect(code).toHaveClass(\"Code\", \"Box\", \"Test\")\n})\n\ntest(\"renders CodePen\", () => {\n  const { getByTitle } = render(<Code />)\n\n  const codepen = getByTitle(\"codepen\")\n  expect(codepen).toBeInTheDocument()\n  expect(codepen).toHaveAttribute(\"data-prefill\", `{\"title\":\"\"}`)\n  expect(codepen).not.toHaveTextContent()\n})\n\ntest(\"renders CodePen with title\", () => {\n  const title = \"Hello, World!\"\n\n  const { getByTitle } = render(<Code title={title} />)\n\n  const codepen = getByTitle(\"codepen\")\n  expect(codepen).toBeInTheDocument()\n  expect(codepen).toHaveAttribute(\"data-prefill\", `{\"title\":\"${title}\"}`)\n  expect(codepen).not.toHaveTextContent()\n})\n\ntest(\"renders CodePen with default prefill for html, css and js\", () => {\n  const prefill = {\n    html: true,\n    css: true,\n    js: true,\n  }\n\n  const { getByText } = render(<Code {...prefill} />)\n\n  const html = getByText((content) => content.startsWith(\"<body>\"))\n  expect(html).toBeInTheDocument()\n  expect(html).toHaveAttribute(\"data-lang\", \"html\")\n\n  const css = getByText((content) => content.startsWith(\"body\"))\n  expect(css).toBeInTheDocument()\n  expect(css).toHaveAttribute(\"data-lang\", \"css\")\n\n  const js = getByText((content) => content.startsWith(\"//\"))\n  expect(js).toBeInTheDocument()\n  expect(js).toHaveAttribute(\"data-lang\", \"js\")\n})\n\ntest(\"renders CodePen with provided prefill for html, css and js\", () => {\n  const prefill = {\n    html: `<div>welcome</div>`,\n    css: `div {color: purple}`,\n    js: `alert('hello')`,\n  }\n\n  const { getByText } = render(<Code {...prefill} />)\n\n  const html = getByText(prefill.html)\n  expect(html).toBeInTheDocument()\n  expect(html).toHaveAttribute(\"data-lang\", \"html\")\n\n  const css = getByText(prefill.css)\n  expect(css).toBeInTheDocument()\n  expect(css).toHaveAttribute(\"data-lang\", \"css\")\n\n  const js = getByText(prefill.js)\n  expect(js).toBeInTheDocument()\n  expect(js).toHaveAttribute(\"data-lang\", \"js\")\n})\n"],"sourceRoot":""}